// Generated by rstantools.  Do not edit by hand.

/*
    AdaptBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AdaptBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AdaptBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_RegHS_Stable_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_RegHS_Stable");
    reader.add_event(57, 55, "end", "model_RegHS_Stable");
    return reader;
}
#include <stan_meta_header.hpp>
class model_RegHS_Stable : public prob_grad {
private:
        int n_stan;
        int p_stan;
        int q_stan;
        std::vector<int> y_stan;
        matrix_d x_standardized_stan;
        double local_dof_stan;
        double global_dof_stan;
        double beta_orig_scale_stan;
        double beta_aug_scale_stan;
        double slab_precision_stan;
        vector_d intercept_offset_stan;
        int only_prior;
public:
    model_RegHS_Stable(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_RegHS_Stable(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_RegHS_Stable_namespace::model_RegHS_Stable";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_stan", "int", context__.to_vec());
            n_stan = int(0);
            vals_i__ = context__.vals_i("n_stan");
            pos__ = 0;
            n_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_stan", n_stan, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "p_stan", "int", context__.to_vec());
            p_stan = int(0);
            vals_i__ = context__.vals_i("p_stan");
            pos__ = 0;
            p_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "p_stan", p_stan, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "q_stan", "int", context__.to_vec());
            q_stan = int(0);
            vals_i__ = context__.vals_i("q_stan");
            pos__ = 0;
            q_stan = vals_i__[pos__++];
            check_greater_or_equal(function__, "q_stan", q_stan, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("y_stan", "n_stan", n_stan);
            context__.validate_dims("data initialization", "y_stan", "int", context__.to_vec(n_stan));
            y_stan = std::vector<int>(n_stan, int(0));
            vals_i__ = context__.vals_i("y_stan");
            pos__ = 0;
            size_t y_stan_k_0_max__ = n_stan;
            for (size_t k_0__ = 0; k_0__ < y_stan_k_0_max__; ++k_0__) {
                y_stan[k_0__] = vals_i__[pos__++];
            }
            size_t y_stan_i_0_max__ = n_stan;
            for (size_t i_0__ = 0; i_0__ < y_stan_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], 0);
                check_less_or_equal(function__, "y_stan[i_0__]", y_stan[i_0__], 1);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("x_standardized_stan", "n_stan", n_stan);
            validate_non_negative_index("x_standardized_stan", "(p_stan + q_stan)", (p_stan + q_stan));
            context__.validate_dims("data initialization", "x_standardized_stan", "matrix_d", context__.to_vec(n_stan,(p_stan + q_stan)));
            x_standardized_stan = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_stan, (p_stan + q_stan));
            vals_r__ = context__.vals_r("x_standardized_stan");
            pos__ = 0;
            size_t x_standardized_stan_j_2_max__ = (p_stan + q_stan);
            size_t x_standardized_stan_j_1_max__ = n_stan;
            for (size_t j_2__ = 0; j_2__ < x_standardized_stan_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_standardized_stan_j_1_max__; ++j_1__) {
                    x_standardized_stan(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "local_dof_stan", "double", context__.to_vec());
            local_dof_stan = double(0);
            vals_r__ = context__.vals_r("local_dof_stan");
            pos__ = 0;
            local_dof_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "local_dof_stan", local_dof_stan, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "global_dof_stan", "double", context__.to_vec());
            global_dof_stan = double(0);
            vals_r__ = context__.vals_r("global_dof_stan");
            pos__ = 0;
            global_dof_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "global_dof_stan", global_dof_stan, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "beta_orig_scale_stan", "double", context__.to_vec());
            beta_orig_scale_stan = double(0);
            vals_r__ = context__.vals_r("beta_orig_scale_stan");
            pos__ = 0;
            beta_orig_scale_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_orig_scale_stan", beta_orig_scale_stan, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "beta_aug_scale_stan", "double", context__.to_vec());
            beta_aug_scale_stan = double(0);
            vals_r__ = context__.vals_r("beta_aug_scale_stan");
            pos__ = 0;
            beta_aug_scale_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_aug_scale_stan", beta_aug_scale_stan, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "slab_precision_stan", "double", context__.to_vec());
            slab_precision_stan = double(0);
            vals_r__ = context__.vals_r("slab_precision_stan");
            pos__ = 0;
            slab_precision_stan = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_precision_stan", slab_precision_stan, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("intercept_offset_stan", "n_stan", n_stan);
            context__.validate_dims("data initialization", "intercept_offset_stan", "vector_d", context__.to_vec(n_stan));
            intercept_offset_stan = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_stan);
            vals_r__ = context__.vals_r("intercept_offset_stan");
            pos__ = 0;
            size_t intercept_offset_stan_j_1_max__ = n_stan;
            for (size_t j_1__ = 0; j_1__ < intercept_offset_stan_j_1_max__; ++j_1__) {
                intercept_offset_stan(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "intercept_offset_stan", intercept_offset_stan, 0);
            check_less_or_equal(function__, "intercept_offset_stan", intercept_offset_stan, 1);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "only_prior", "int", context__.to_vec());
            only_prior = int(0);
            vals_i__ = context__.vals_i("only_prior");
            pos__ = 0;
            only_prior = vals_i__[pos__++];
            check_greater_or_equal(function__, "only_prior", only_prior, 0);
            check_less_or_equal(function__, "only_prior", only_prior, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
            current_statement_begin__ = 19;
            validate_non_negative_index("beta_raw", "(p_stan + q_stan)", (p_stan + q_stan));
            num_params_r__ += (p_stan + q_stan);
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            validate_non_negative_index("lambda_orig_base_sq", "p_stan", p_stan);
            num_params_r__ += p_stan;
            current_statement_begin__ = 25;
            validate_non_negative_index("lambda_orig_scale_sq", "p_stan", p_stan);
            num_params_r__ += p_stan;
            current_statement_begin__ = 26;
            validate_non_negative_index("lambda_aug_base_sq", "q_stan", q_stan);
            num_params_r__ += q_stan;
            current_statement_begin__ = 27;
            validate_non_negative_index("lambda_aug_scale_sq", "q_stan", q_stan);
            num_params_r__ += q_stan;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_RegHS_Stable() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 17;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("mu_offset")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_offset missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_offset");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_offset", "double", context__.to_vec());
        double mu_offset(0);
        mu_offset = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_offset);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_offset: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "(p_stan + q_stan)", (p_stan + q_stan));
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec((p_stan + q_stan)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw((p_stan + q_stan));
        size_t beta_raw_j_1_max__ = (p_stan + q_stan);
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            beta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("tau_glob_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_glob_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_glob_base_sq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_glob_base_sq", "double", context__.to_vec());
        double tau_glob_base_sq(0);
        tau_glob_base_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_glob_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_glob_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("tau_glob_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_glob_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_glob_scale_sq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_glob_scale_sq", "double", context__.to_vec());
        double tau_glob_scale_sq(0);
        tau_glob_scale_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_glob_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_glob_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("lambda_orig_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_orig_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_orig_base_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_orig_base_sq", "p_stan", p_stan);
        context__.validate_dims("parameter initialization", "lambda_orig_base_sq", "vector_d", context__.to_vec(p_stan));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_orig_base_sq(p_stan);
        size_t lambda_orig_base_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_base_sq_j_1_max__; ++j_1__) {
            lambda_orig_base_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, lambda_orig_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_orig_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("lambda_orig_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_orig_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_orig_scale_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_orig_scale_sq", "p_stan", p_stan);
        context__.validate_dims("parameter initialization", "lambda_orig_scale_sq", "vector_d", context__.to_vec(p_stan));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_orig_scale_sq(p_stan);
        size_t lambda_orig_scale_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_scale_sq_j_1_max__; ++j_1__) {
            lambda_orig_scale_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, lambda_orig_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_orig_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("lambda_aug_base_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_aug_base_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_aug_base_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_aug_base_sq", "q_stan", q_stan);
        context__.validate_dims("parameter initialization", "lambda_aug_base_sq", "vector_d", context__.to_vec(q_stan));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_aug_base_sq(q_stan);
        size_t lambda_aug_base_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_base_sq_j_1_max__; ++j_1__) {
            lambda_aug_base_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, lambda_aug_base_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_aug_base_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("lambda_aug_scale_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_aug_scale_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_aug_scale_sq");
        pos__ = 0U;
        validate_non_negative_index("lambda_aug_scale_sq", "q_stan", q_stan);
        context__.validate_dims("parameter initialization", "lambda_aug_scale_sq", "vector_d", context__.to_vec(q_stan));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_aug_scale_sq(q_stan);
        size_t lambda_aug_scale_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_scale_sq_j_1_max__; ++j_1__) {
            lambda_aug_scale_sq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, lambda_aug_scale_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_aug_scale_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 17;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();
            current_statement_begin__ = 18;
            local_scalar_t__ mu_offset;
            (void) mu_offset;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_offset = in__.scalar_constrain(lp__);
            else
                mu_offset = in__.scalar_constrain();
            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_raw;
            (void) beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_raw = in__.vector_constrain((p_stan + q_stan), lp__);
            else
                beta_raw = in__.vector_constrain((p_stan + q_stan));
            current_statement_begin__ = 21;
            local_scalar_t__ tau_glob_base_sq;
            (void) tau_glob_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_glob_base_sq = in__.scalar_lb_constrain(0, lp__);
            else
                tau_glob_base_sq = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 22;
            local_scalar_t__ tau_glob_scale_sq;
            (void) tau_glob_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_glob_scale_sq = in__.scalar_lb_constrain(0, lp__);
            else
                tau_glob_scale_sq = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_orig_base_sq;
            (void) lambda_orig_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_orig_base_sq = in__.vector_lb_constrain(0, p_stan, lp__);
            else
                lambda_orig_base_sq = in__.vector_lb_constrain(0, p_stan);
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_orig_scale_sq;
            (void) lambda_orig_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_orig_scale_sq = in__.vector_lb_constrain(0, p_stan, lp__);
            else
                lambda_orig_scale_sq = in__.vector_lb_constrain(0, p_stan);
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_aug_base_sq;
            (void) lambda_aug_base_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_aug_base_sq = in__.vector_lb_constrain(0, q_stan, lp__);
            else
                lambda_aug_base_sq = in__.vector_lb_constrain(0, q_stan);
            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_aug_scale_sq;
            (void) lambda_aug_scale_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_aug_scale_sq = in__.vector_lb_constrain(0, q_stan, lp__);
            else
                lambda_aug_scale_sq = in__.vector_lb_constrain(0, q_stan);
            // transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "(p_stan + q_stan)", (p_stan + q_stan));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta((p_stan + q_stan));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("theta_orig", "p_stan", p_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_orig(p_stan);
            stan::math::initialize(theta_orig, DUMMY_VAR__);
            stan::math::fill(theta_orig, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("theta_aug", "q_stan", q_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_aug(q_stan);
            stan::math::initialize(theta_aug, DUMMY_VAR__);
            stan::math::fill(theta_aug, DUMMY_VAR__);
            current_statement_begin__ = 33;
            local_scalar_t__ tau_glob_sq;
            (void) tau_glob_sq;  // dummy to suppress unused var warning
            stan::math::initialize(tau_glob_sq, DUMMY_VAR__);
            stan::math::fill(tau_glob_sq, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("lambda_orig_sq", "p_stan", p_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_orig_sq(p_stan);
            stan::math::initialize(lambda_orig_sq, DUMMY_VAR__);
            stan::math::fill(lambda_orig_sq, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("lambda_aug_sq", "q_stan", q_stan);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_aug_sq(q_stan);
            stan::math::initialize(lambda_aug_sq, DUMMY_VAR__);
            stan::math::fill(lambda_aug_sq, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 36;
            stan::math::assign(tau_glob_sq, (tau_glob_base_sq * tau_glob_scale_sq));
            current_statement_begin__ = 37;
            stan::math::assign(lambda_orig_sq, elt_multiply(lambda_orig_base_sq, lambda_orig_scale_sq));
            current_statement_begin__ = 38;
            stan::math::assign(lambda_aug_sq, elt_multiply(lambda_aug_base_sq, lambda_aug_scale_sq));
            current_statement_begin__ = 39;
            stan::math::assign(theta_orig, elt_divide(1.0, stan::math::sqrt(add(slab_precision_stan, elt_divide(1.0, multiply((pow(beta_orig_scale_stan, 2) * tau_glob_sq), lambda_orig_sq))))));
            current_statement_begin__ = 40;
            stan::math::assign(theta_aug, elt_divide(1.0, stan::math::sqrt(add(slab_precision_stan, elt_divide(1.0, multiply((pow(beta_aug_scale_stan, 2) * tau_glob_sq), lambda_aug_sq))))));
            current_statement_begin__ = 41;
            stan::math::assign(beta, elt_multiply(append_row(theta_orig, theta_aug), beta_raw));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 30;
            size_t beta_j_1_max__ = (p_stan + q_stan);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 31;
            size_t theta_orig_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < theta_orig_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta_orig(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_orig" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_orig: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "theta_orig", theta_orig, 0);
            check_less_or_equal(function__, "theta_orig", theta_orig, stan::math::sqrt((1 / slab_precision_stan)));
            current_statement_begin__ = 32;
            size_t theta_aug_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < theta_aug_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta_aug(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_aug" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_aug: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "theta_aug", theta_aug, 0);
            check_less_or_equal(function__, "theta_aug", theta_aug, stan::math::sqrt((1 / slab_precision_stan)));
            current_statement_begin__ = 33;
            if (stan::math::is_uninitialized(tau_glob_sq)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau_glob_sq";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau_glob_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau_glob_sq", tau_glob_sq, 0);
            current_statement_begin__ = 34;
            size_t lambda_orig_sq_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_orig_sq_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_orig_sq(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_orig_sq" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_orig_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda_orig_sq", lambda_orig_sq, 0);
            current_statement_begin__ = 35;
            size_t lambda_aug_sq_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_aug_sq_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_aug_sq(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_aug_sq" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_aug_sq: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda_aug_sq", lambda_aug_sq, 0);
            // model body
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(beta_raw, 0.0, 1.0));
            current_statement_begin__ = 45;
            lp_accum__.add(chi_square_log<propto__>(tau_glob_base_sq, 1.0));
            current_statement_begin__ = 46;
            lp_accum__.add(inv_gamma_log<propto__>(tau_glob_scale_sq, (global_dof_stan / 2.0), (global_dof_stan / 2.0)));
            current_statement_begin__ = 47;
            lp_accum__.add(chi_square_log<propto__>(lambda_orig_base_sq, 1.0));
            current_statement_begin__ = 48;
            lp_accum__.add(inv_gamma_log<propto__>(lambda_orig_scale_sq, (local_dof_stan / 2.0), (local_dof_stan / 2.0)));
            current_statement_begin__ = 49;
            lp_accum__.add(chi_square_log<propto__>(lambda_aug_base_sq, 1.0));
            current_statement_begin__ = 50;
            lp_accum__.add(inv_gamma_log<propto__>(lambda_aug_scale_sq, (local_dof_stan / 2.0), (local_dof_stan / 2.0)));
            current_statement_begin__ = 51;
            lp_accum__.add(logistic_log<propto__>(mu, 0.0, 5.0));
            current_statement_begin__ = 52;
            lp_accum__.add(logistic_log<propto__>(mu_offset, 0.0, 2.5));
            current_statement_begin__ = 53;
            if (as_bool(logical_eq(only_prior, 0))) {
                current_statement_begin__ = 54;
                lp_accum__.add(bernoulli_logit_log<propto__>(y_stan, add(add(mu, multiply(intercept_offset_stan, mu_offset)), multiply(x_standardized_stan, beta))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("mu_offset");
        names__.push_back("beta_raw");
        names__.push_back("tau_glob_base_sq");
        names__.push_back("tau_glob_scale_sq");
        names__.push_back("lambda_orig_base_sq");
        names__.push_back("lambda_orig_scale_sq");
        names__.push_back("lambda_aug_base_sq");
        names__.push_back("lambda_aug_scale_sq");
        names__.push_back("beta");
        names__.push_back("theta_orig");
        names__.push_back("theta_aug");
        names__.push_back("tau_glob_sq");
        names__.push_back("lambda_orig_sq");
        names__.push_back("lambda_aug_sq");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((p_stan + q_stan));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((p_stan + q_stan));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_stan);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q_stan);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_RegHS_Stable_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu = in__.scalar_constrain();
        vars__.push_back(mu);
        double mu_offset = in__.scalar_constrain();
        vars__.push_back(mu_offset);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw = in__.vector_constrain((p_stan + q_stan));
        size_t beta_raw_j_1_max__ = (p_stan + q_stan);
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_raw(j_1__));
        }
        double tau_glob_base_sq = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_glob_base_sq);
        double tau_glob_scale_sq = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_glob_scale_sq);
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_orig_base_sq = in__.vector_lb_constrain(0, p_stan);
        size_t lambda_orig_base_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_base_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_orig_base_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_orig_scale_sq = in__.vector_lb_constrain(0, p_stan);
        size_t lambda_orig_scale_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_scale_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_orig_scale_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_aug_base_sq = in__.vector_lb_constrain(0, q_stan);
        size_t lambda_aug_base_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_base_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_aug_base_sq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_aug_scale_sq = in__.vector_lb_constrain(0, q_stan);
        size_t lambda_aug_scale_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_scale_sq_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_aug_scale_sq(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "(p_stan + q_stan)", (p_stan + q_stan));
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta((p_stan + q_stan));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("theta_orig", "p_stan", p_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta_orig(p_stan);
            stan::math::initialize(theta_orig, DUMMY_VAR__);
            stan::math::fill(theta_orig, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("theta_aug", "q_stan", q_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta_aug(q_stan);
            stan::math::initialize(theta_aug, DUMMY_VAR__);
            stan::math::fill(theta_aug, DUMMY_VAR__);
            current_statement_begin__ = 33;
            double tau_glob_sq;
            (void) tau_glob_sq;  // dummy to suppress unused var warning
            stan::math::initialize(tau_glob_sq, DUMMY_VAR__);
            stan::math::fill(tau_glob_sq, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("lambda_orig_sq", "p_stan", p_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_orig_sq(p_stan);
            stan::math::initialize(lambda_orig_sq, DUMMY_VAR__);
            stan::math::fill(lambda_orig_sq, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("lambda_aug_sq", "q_stan", q_stan);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_aug_sq(q_stan);
            stan::math::initialize(lambda_aug_sq, DUMMY_VAR__);
            stan::math::fill(lambda_aug_sq, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 36;
            stan::math::assign(tau_glob_sq, (tau_glob_base_sq * tau_glob_scale_sq));
            current_statement_begin__ = 37;
            stan::math::assign(lambda_orig_sq, elt_multiply(lambda_orig_base_sq, lambda_orig_scale_sq));
            current_statement_begin__ = 38;
            stan::math::assign(lambda_aug_sq, elt_multiply(lambda_aug_base_sq, lambda_aug_scale_sq));
            current_statement_begin__ = 39;
            stan::math::assign(theta_orig, elt_divide(1.0, stan::math::sqrt(add(slab_precision_stan, elt_divide(1.0, multiply((pow(beta_orig_scale_stan, 2) * tau_glob_sq), lambda_orig_sq))))));
            current_statement_begin__ = 40;
            stan::math::assign(theta_aug, elt_divide(1.0, stan::math::sqrt(add(slab_precision_stan, elt_divide(1.0, multiply((pow(beta_aug_scale_stan, 2) * tau_glob_sq), lambda_aug_sq))))));
            current_statement_begin__ = 41;
            stan::math::assign(beta, elt_multiply(append_row(theta_orig, theta_aug), beta_raw));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 31;
            check_greater_or_equal(function__, "theta_orig", theta_orig, 0);
            check_less_or_equal(function__, "theta_orig", theta_orig, stan::math::sqrt((1 / slab_precision_stan)));
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "theta_aug", theta_aug, 0);
            check_less_or_equal(function__, "theta_aug", theta_aug, stan::math::sqrt((1 / slab_precision_stan)));
            current_statement_begin__ = 33;
            check_greater_or_equal(function__, "tau_glob_sq", tau_glob_sq, 0);
            current_statement_begin__ = 34;
            check_greater_or_equal(function__, "lambda_orig_sq", lambda_orig_sq, 0);
            current_statement_begin__ = 35;
            check_greater_or_equal(function__, "lambda_aug_sq", lambda_aug_sq, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = (p_stan + q_stan);
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t theta_orig_j_1_max__ = p_stan;
                for (size_t j_1__ = 0; j_1__ < theta_orig_j_1_max__; ++j_1__) {
                    vars__.push_back(theta_orig(j_1__));
                }
                size_t theta_aug_j_1_max__ = q_stan;
                for (size_t j_1__ = 0; j_1__ < theta_aug_j_1_max__; ++j_1__) {
                    vars__.push_back(theta_aug(j_1__));
                }
                vars__.push_back(tau_glob_sq);
                size_t lambda_orig_sq_j_1_max__ = p_stan;
                for (size_t j_1__ = 0; j_1__ < lambda_orig_sq_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_orig_sq(j_1__));
                }
                size_t lambda_aug_sq_j_1_max__ = q_stan;
                for (size_t j_1__ = 0; j_1__ < lambda_aug_sq_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_aug_sq(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_RegHS_Stable";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_offset";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_raw_j_1_max__ = (p_stan + q_stan);
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_glob_base_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_glob_scale_sq";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_orig_base_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_orig_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_orig_scale_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_orig_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_aug_base_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_aug_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_aug_scale_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_aug_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = (p_stan + q_stan);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_orig_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < theta_orig_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_orig" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_aug_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < theta_aug_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_aug" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_glob_sq";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_orig_sq_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_orig_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_orig_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_aug_sq_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_aug_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_aug_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_offset";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_raw_j_1_max__ = (p_stan + q_stan);
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_glob_base_sq";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_glob_scale_sq";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_orig_base_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_orig_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_orig_scale_sq_j_1_max__ = p_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_orig_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_orig_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_aug_base_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_base_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_aug_base_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_aug_scale_sq_j_1_max__ = q_stan;
        for (size_t j_1__ = 0; j_1__ < lambda_aug_scale_sq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_aug_scale_sq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = (p_stan + q_stan);
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_orig_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < theta_orig_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_orig" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_aug_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < theta_aug_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_aug" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_glob_sq";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_orig_sq_j_1_max__ = p_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_orig_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_orig_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_aug_sq_j_1_max__ = q_stan;
            for (size_t j_1__ = 0; j_1__ < lambda_aug_sq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_aug_sq" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_RegHS_Stable_namespace::model_RegHS_Stable stan_model;
#endif
